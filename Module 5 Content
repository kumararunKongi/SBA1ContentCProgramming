1. A structure with predefined data to specify data of customers in a bank is given. 
maximum of 5 customers in the bank.
The data contains account number, name of customer and bank balance in the order:

If a existing customer requests for withdrawal or deposit, the data to be supplied is given below:
Acct. no, code (1 for deposit, 0 for withdrawal) and amount.
Write a function to give a message, “The balance is insufficient for the specified withdrawal”, if on withdrawal the balance falls
below Rs. 100. and corresponding deposited and withdrawal messages as specified in the text cases given below:

Input format: You need to enter the existing account number of customer on first line
Code for withdrawal or deposit in the second line
amount on the third line.

/the structure with customer data is already given. Use the existing data to perform operations
struct acc_holder
{
    int acc_num;
    char name[30];
    int bal;
    }sbi[5]={77790, "ARUN", 80000,
44421, "VIVEK", 20000,
67123, "AKASH", 100,
88221, "KAVITA", 50000 ,
22541, "KAVYA", 10000
};

Test cases examples:
-------------------------
case=t1
input=44421
1
4000
output=
"Dear VIVEK,
	Updated balance after deposit is: 24000"

case=t2
fail message="check the balance"
input=67123
0
100
output=The balance is insufficient for the specified withdrawal

case=t3
input=77790
0
5000
output=
"Dear ARUN,
	Updated balance after withdrawal is: 75000"

case=t4
fail message="hidden test case"
input=22541
0
10000
output=The balance is insufficient for the specified withdrawal
PROGRAM:
--------------
#include<stdio.h>
void depositwithdraw(int, int, int);
struct acc_holder
{
    long int acc_num;
    char name[30];
    int bal;
    }sbi[5]={77790, "ARUN", 80000,
44421, "VIVEK", 20000,
67123, "AKASH", 100,
88221, "KAVITA", 50000 ,
22541, "KAVYA", 10000
};

int main()
{
int accnum, amount, code;
scanf("%d", &accnum);
scanf("%d", &code);
if (code)
{
	scanf("%d", &amount);
}
else
{
	scanf("%d", &amount);
}
depositwithdraw(accnum, amount, code);
return 0;
}

void depositwithdraw(int accnum, int amount, int code)
{
int i;
for (i = 0; i < 5; i++)
{
	if (sbi[i].acc_num == accnum)
		break;
}
if (code==0)
{
	if (sbi[i].bal - amount < 100)
	{
		printf("The balance is insufficient for the specified withdrawal");
		return;
	}
	else
	{
		sbi[i].bal -= amount;
		printf("Dear %s,\n\tUpdated balance after withdrawal is: %d", sbi[i].name,sbi[i].bal);
	}
}
else
{
	sbi[i].bal += amount;
	printf("Dear %s,\n\tUpdated balance after deposit is: %d", sbi[i].name,sbi[i].bal);
}
}

2. /* There are five players from which the Most Valuable Player (MVP) is to be chosen. Each player is to be judged by 3 judges, who would
assign a rank(between 1 to 10) to each player entered one by one. The player whose sum of ranks is highest is chosen as MVP of the season. 
Write a structure program to implement the same. 

The structure template is given below.

Test cases example:
-------------------------
case=t1
input=virat kohli
8 
9
7
m s dhoni
7
7
7
virender sehwag
10
9
9
output="virender sehwag is chosen as MVP of the season"

case=t2
input=
virat kohli
5
7
9
m s dhoni
8
8
8
rohit sharma
8
3
5
output=m s dhoni is chosen as MVP of the season

case=t3
fail message="hidden test case. Hint: the first players rank is highest and check spacing error in name"
input=virat kohli
10
10
10
m s dhoni
7
7
7
virender sehwag
10
9
6
output="virat kohli is chosen as MVP of the season"

PROGRAM:
-------------------
#include<stdio.h>
struct MVP
{
    char name[20];
    int rank[3];  //3 different ranks given by 3 judges for each player
    int tot;      //tot is the total sum of all ranks for each player
};

int main()
{
    struct MVP player[3];
    int i, j, max = 0, p = 0;

    for (i = 0; i < 3; i++)
    {
        scanf(" %[^\n]", player[i].name); 
        for (j = 0; j < 3; j++)
        {
            scanf("%d", &player[i].rank[j]);
        }
    }

    for (i = 0; i < 3; i++)
    {
        player[i].tot = player[i].rank[0] + player[i].rank[1] + player[i].rank[2];
        if (player[i].tot > max)
        {
            max = player[i].tot;
            p = i;
        }
    }

    printf("%s is chosen as MVP of the season\n", player[p].name);
    return 0;
}

3.  Write a function that compares two given dates. To store a date use a structure that contains three members namely day, month and
year. If the dates are equal the function should return 0, otherwise it should return 1.

#include<stdio.h>
struct dmy
{
int date;
int month;
int year;
};

int datcmp(struct dmy a, struct dmy b)
{
  //ur code here the function compares 2 dates and returns 0 or 1 to main function
}
int main()
{
//complete code

Test cases example:
-------------------
case=t1
input=
25-12-2013
25-12-2013
output=
The dates are same

case=t2
input=
25-12-2013
11-01-2018
output=
The dates are not same

case=t3
fail message="hidden case"
input=
25-12-2013
11-01-2018
output=
The dates are not same


PROGRAM:
----------------
#include<stdio.h>
struct dmy
{
int date;
int month;
int year;
};

int datcmp(struct dmy a, struct dmy b)
{
if (a.date == b.date && a.month == b.month && a.year == b.year)
	return 0;
else
	return 1;
}

int main()
{
struct dmy a, b;
int flag;
scanf("%d%d%d", &a.date, &a.month, &a.year);
scanf("%d%d%d", &b.date, &b.month, &b.year);
flag = datcmp(a, b);
if (flag)
	printf("The dates are not same\n");
else
	printf("The dates are same\n");
return 0;
}

4. A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored
in each test match. Create an array of structures to hold records of 20 such cricketers and then write a program to read these records
and arrange them in ascending order by average runs. Use the qsort( ) standard library function.
#include<stdio.h>
#include<stdlib.h>
#define Max 3

struct cricketers
{
int avgruns;
char name[30];
int totmatches;

}india[Max];

Test cases:
-------------------
case=t1
input=
68 kohli 200
56 dhoni 250
48 rohit 150
output=
Name: rohit
Total Matches played: 150
Average Runs: 48

Name: dhoni
Total Matches played: 250
Average Runs: 56

Name: kohli
Total Matches played: 200
Average Runs: 68

case=t2
input=48 yuvraj 180
35 gill 50
45 sky 100
output=
Name: gill
Total Matches played: 50
Average Runs: 35

Name: sky
Total Matches played: 100
Average Runs: 45

Name: yuvraj
Total Matches played: 180
Average Runs: 48

case=t3
fail message="hidden case"
input=50 yuvraj 180
45 gill 50
45 sky 100
output=
Name: gill
Total Matches played: 50
Average Runs: 45

Name: sky
Total Matches played: 100
Average Runs: 45

Name: yuvraj
Total Matches played: 180
Average Runs: 50

PROGRAM:
------------------
#include<stdio.h>
#include<stdlib.h>
#define Max 3

int compare(const void * a, const void * b);

struct cricketers
{
int avgruns;
char name[30];
int totmatches;

}india[Max];

int main()
{
    int i;
    for(i=0;i<Max;i++)
    {
        scanf("%d%s%d",&india[i].avgruns,india[i].name,&india[i].totmatches);
    }

qsort(india, Max, sizeof(struct cricketers), compare);

for (i = 0; i < Max; i++)
{
	printf("Name: %s", india[i].name);
	printf("\nTotal Matches played: %d", india[i].totmatches);
	printf("\nAverage Runs: %d\n\n", india[i].avgruns);
}
return 0;
}

int compare(const void * a, const void * b)
{
return (*(int*)a - *(int*)b);
}

5.Given a enum with predefined values and nested structure with existing product details where product category is fetched from enum.
Write a structure program to enter a existing product name as given in the structure below, and print the product category id.

//note: use the structure and enum templates given below exactly as it is. There are 5 products and 5 categories in enum.
enum supermarket 
{
    Fruits=101, Vegetables, Dairy, Grocery, Beverages
};

struct Product 
{
    char name[50];
    int price;
    enum supermarket id;                //concept of nested structure
    
} prod[5]={"bread", 50, Dairy,
"Brocolli", 140, Vegetables,
"Lychee", 70, Fruits,
"Peanuts", 200, Grocery,
"Limesoda", 20, Beverages};

Test cases example:
------------------------
case=t1
input=Peanuts
output=Category ID: 104

case=t2
input=Lychee
output=Category ID: 101

case=t3
input=Brocolli
output=Category ID: 102

case=t4
fail message="hidden test case"
input=bread
output=Category ID: 103

PROGRAM:
---------------
#include <stdio.h>
#include<string.h>
enum supermarket 
{
    Fruits=101, Vegetables, Dairy, Grocery, Beverages
};

struct Product 
{
    char name[50];
    int price;
    enum supermarket id;                            //concept of nested structure
    
} prod[5]={"bread", 50, Dairy,
"Brocolli", 140, Vegetables,
"Lychee", 70, Fruits,
"Peanuts", 200, Grocery,
"Limesoda", 20, Beverages};

int main()
{
   
    char productName[50];
   // printf("Enter product name: ");
    scanf("%s", productName);

    int i;
    int flag = 0;  

    for (i = 0; i < 5; i++)
    {
        if (strcmp(productName, prod[i].name) == 0) 
        {
            flag = prod[i].id;
            break;
        }
    }

    if (flag != 0) 
    {
        printf("Category ID: %d\n", flag);
    } else {
        printf("Id not found\n");
    }

    return 0;
}




