1. Create a function called getint(), which would receive a numeric string
from the keyboard, convert it to an integer number and return the
integer to the calling function main. 

Conditions: string length: 0<n<=10  if user enter more than 10 characters,
take the first 10 characters and convert to an integer number.

Testcases:
------------------
case=t1
input=12345
output=Number: 12345

case=t2
input=123456789878
output=Number: 1234567898

case=t3
Fail message="maximum integer limit is exceeded, print upto the integer limit"
input=21474836471
output=Number: 2147483647

case=t4
input=arunck
output=0

PROGRAM:
---------------
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int getint();
int main()
{
    int num;
    num = getint();
    printf("Number: %d", num);
    return 0;
}

int getint()
{
    int num = 0;
    char number[11];
    fgets(number,sizeof(number),stdin);
    num=atoi(number);
    return num;
}

2. Read string of values into an array of pointer to strings and print them.
Note: Use dynamic memory allocation concept, after allocating and printing, deallocate the memory.

The part of the code to deallocate the memory is given in the file.

Test case example:
-----------------------
case=t1
input=5
arun kongi
griet
training
and placement
hyderabad
output=You entered 5 string values:
String 1: arun kongi

String 2: griet

String 3: training

String 4: and placement

String 5: hyderabad

case=t2
fail message="hidden test case"
input=5
this is c
programming
language
training
program
output=You entered 5 String values:
String 1: this is c

String 2: programming

String 3: language

String 4: training

String 5: program

PROGRAM:
-------------------
#include <stdio.h>
#include<stdlib.h>
#include<string.h>

int main() 
{
    int n;
    scanf("%d",&n);
    int c=getchar();
    char *str[n];  
    int i;

    for (i = 0; i < n; i++) 
    {
        char buffer[20];
       // printf("Enter string %d: ", i + 1);
        fgets(buffer, sizeof(buffer), stdin);
        str[i] = malloc(strlen(buffer) + 1);
        strcpy(str[i], buffer);
    }
    printf("You entered %d String values:\n",n);
    for (i = 0; i < n; i++)
    {
        printf("String %d: %s\n", i + 1, str[i]);
    }
   

    for (i = 0; i < n; i++)
    {
        free(str[i]);
    }

    return 0;
}
3.  Given three variables a, b, c write a function to circularly shift their values to left. 
In other words if a = 5, b = 8, c = 10, after circular shift a= 8 b= 10 c= 5. 
Call the function with variables a, b, c to circularly shift values.

Note: use the concept of pointers and the function already provided in the file. 

Test case example:
-----------------
case=t1
input=2 3 4
output="a: 3	b: 4	c: 2"

case=t2
input=5 8 10
output="a: 8	b: 10	c: 5"

case=t3
Fail message="General Hidden test case"
input= 1 2 3
output="a: 2	b: 3	c: 1"
 
PROGRAM:
---------------
#include<stdio.h>
void circularshift(int*, int*, int*);
int main()
{
int a, b, c;
//printf("Enter three numbers : ");
scanf("%d%d%d", &a, &b, &c);
circularshift(&a, &b, &c);
printf("a: %d\tb: %d\tc: %d", a, b, c);
return 0;

}
void circularshift(int *a, int *b, int *c)
{
   int temp = *a;
    *a = *b;
    *b = *c;
    *c = temp;
}

4. In a given integer N, check whether the kth bit is set or not. 
Print "true" if kth bit is set in the given integer N, "false" otherwise.

Input Format: Enter the number n and integer k

Test case example:

input=10 1
output=true

Explaination: 10 in binary is 1010, k=1, which means 1st bit is set(left to right)

input=10 2
output=false

Explaination: 10 in binary is 1010, k=2 which means 2nd bit is not set.. So false.

Note: Use the given function format!!
TESTCASES:
-----------------
case=t1
input=10 0
output=false

case=t2
input=10 1
output=true

case=t3
input=34 4
output=false

case=t4
Fail message="normal hidden test case"
input=1000 2
output=false

PROGRAM:
--------------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void bitsetornot(int n, int k)
{
    if (n & (1 << k))
        printf("true");
    else
        printf("false");
}

// Driver code
int main()
{
    int n, k;                      //n=5, k=1   101 ans False
     scanf("%d%d",&n,&k);

    bitsetornot(n, k);
    return 0;
}

5. /* Write a recursive function to compute the greatest common divisor given by
Euclid’s algorithm, for example: for A = 1980, B = 1617 as follows:
1980 / 1617 = 1   1980 – 1 * 1617 = 363
1617 / 363 = 4    1617 – 4 * 363 = 165
363 / 165 = 2     363 – 2 * 165 = 33
5 / 33 = 5        165 – 5 * 33 = 0

When B reaches zero return the A value as GCD>

Test case example:
case=t1
input=
1980 1617
output=
33

case=t2
input=
15 20
output=
5

case=t3
input=
100 200
output=
100

case=t4
fail message="check condition for B value zero"
input=
4 0
output=
4

PROGRAM:
----------------
#include<stdio.h>
int gcd(int, int);
int main()
{
    int a, b, cd, max, min;
    //printf("Enter two numbers : ");
    scanf("%d%d", &a, &b);
    if (a>b)
    {
     	max = a;
    	min = b;
    }
    else
    {
	       max = b;
        	min = a;
    }
    a = max;
    b = min;
    cd = gcd(a, b);
    printf("%d", cd);
    return 0;
}
int gcd(int a, int b)
{
    int x, temp;
    if (b == 0)
	return a;
    
    x = a / b;
    temp = a;
    a = b;
    b = temp - x*b;
    gcd(a, b);
}

6. Enter a String of characters with spaces, and replace each character
with next possible character in the order using pointers.

Use the given function which accepts a character pointer. 

If the string length is more than 100 characters print error message as follows:
"string length exceeds 100 chracters"

Test case example:
-----------------------
case=t1
input=ARSENAL
output=BSTFOBM

case=t2
input=GRIET COLLEGE
output=HSJFU!DPMMFHF

case=t3
Fail message="string is a number: for example: 123 should be 234"
input=12345
output=23456

case=t4
input=ergerg erg erg rg erg erg erg reg erg reg er ger g rth rth rtgh rtg  erfg erge rge rg erg erg ergrekgerkgkergkefvkerg ergerg ergkerkg regkerg
output=string length exceeds 100 chracters

PROGRAM:
----------------
#include <stdio.h>
#include<string.h>
void nextchar(char *);

int main() 
{
     char string[200];
     fgets(string,sizeof(string),stdin);
    
     int length=strlen(string);
     
     if(length>100)
    {
      printf("string length exceeds 100 chracters");
      return 0;
    }

    nextchar(string);
    printf("%s", string);
    return 0;
}

void nextchar(char *a) 
{
    while (*a != '\0')
    {
        *a += 1;
        a++;
    }
}

7. Write a C program to Reverse String using Recursion and Pointer.
  
Testcase example:
----------------------
case=t1
input=arun kumar
output=ramuk nura

case=t2
input=griet college
output=egelloc teirg

case=t3
fail message="Hidden test case"
input=c programming language
output=egaugnal gnimmargorp c

PROGRAM:
-------------------
#include<stdio.h>
#define MAX 100
char* ReverseOfString(char*);

int main()
{

    char str1[MAX],*revstr;
    scanf("%[^\n]",str1);

    revstr = ReverseOfString(str1);

    printf("%s",revstr);
    return 0;
}
char* ReverseOfString(char* str1)
{
    static int i=0;
    static char revstr[MAX];
    if(*str1)
    {
         ReverseOfString(str1+1);
         revstr[i++] = *str1;
    }
    return revstr;
}

8. Write a program to sort a set of names stored in an array in
alphabetical order.

Input Format: Read each strings one after the other in new line and chose yor Y to keep entering the strings.
If pressed n or N stop reading and print names in ascending order.

Note: the strings may contain numbers also. If so, sort them as per the given order of the numbers.

Testcases:
----------------------------
case=t1
Fail message="hidden case"
input=arun
y
kongi
y
ck
n
output=
Names in sorted order are:
arun
ck
kongi

case=t2
input=griet college
y
arun kumar
y
c programming
y
hyderabad
n
output=
Names in sorted order are:
arun kumar
c programming
griet college
hyderabad

case=t3
input=1234
y
5678
y
8912
y
0123
y
5678
n
output=
Names in sorted order are:
0123
1234
5678
5678
8912

PROGRAM:
--------------------
#include<stdio.h>
#include<string.h>
#include<malloc.h>
//#include<Windows.h>

void swap(char *a, char *b)
{
char temp[20];
strcpy(temp, a);
strcpy(a, b);
strcpy(b, temp);
}
void sort_names(char** name_list, int tot_names)
{
int i, j, k = 0;
for (i = 0; i < tot_names; i++)
{
	for (j = i + 1; j < tot_names; j++)
	{
		k = 0;
		while (name_list[i][k] == name_list[j][k])
			k++;
		if (name_list[i][k] > name_list[j][k])
			swap(name_list[j], name_list[i]);
	}
}
}
int main()
{
char *nam_list[10], *p, name[20],ans;
int i = 0, j = 0, a, b;
do
{
	//scanf("%s", name);
	fgets(name,20,stdin);
	name[strcspn(name,"\n")]='\0';
	p = (char*)malloc(strlen(name)+1);
	strcpy(p, name);
	nam_list[i] = p;
	i++;
	//printf("\nWant to enter another name (y/n) : ");
	scanf("%c", &ans);
	 int c=getchar();
}while(ans=='y'||ans=='Y');
sort_names(nam_list, i);

    printf("Names in sorted order are:\n");
    for (j = 0; j <= i - 1; j++)
	printf("%s\n",nam_list[j]);
   
    return 0;
}

9. Write a C program using array of pointers to convert given cash in words.
The maximum cash range is 0<n<1000.

Use the given array of pointers to complete the program.

Testcases example:
----------------------
case=t1
input=
1234
output=Number out of range!

case=t2
input=111
output=one hundred eleven 

case=t3
input=452
output=four hundred fifty two 

case=t4
input=00010
output=ten 

case=t5
fail message="hidden test case"
input=1056
output=Number out of range!

case=t6
fail message="hidden test case"
input=0123
output=one hundred twenty three 

PROGRAM:
----------------
#include <stdio.h>
void numberToWords(int number) 
{
    char *ones[] = {"", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}; //111
    char *teens[] = {"ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
    char *tens[] = {"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};

    if (number >= 1000) 
    {
        printf("%s thousand ", ones[number / 1000]);
        number %= 1000;
    }

    if (number >= 100) 
    {
        printf("%s hundred ", ones[number / 100]);
        number %= 100;
    }

    if (number >= 20) {
        printf("%s ", tens[number / 10]);
        number %= 10;
    }

    if (number >= 10 && number <= 19) {
        printf("%s ", teens[number - 10]);
        return;
    }

    if (number > 0) {
        printf("%s ", ones[number]);
    }
}
int main() {
    int number;

    scanf("%d", &number);

    if (number < 1 || number > 1000)
    {
        printf("Number out of range!");
        return 0;
    }
    numberToWords(number);

    return 0;
}

10. Write a program that will read a line and delete from it all
occurrences of the word "THE"/'the'.
Test case example:
-----------------------
case=t1
input=the gunners
output=After removing all occurrences of the word 'The':
gunners

case=t2
input=India is the greatest country
After removing all occurrences of the word 'the':
output=India is  greatest country

case=t3
fail message="Hidden test case"
input=this is game of life. The survival of the fittest.
output=After removing all occurrences of the word 'the':
this is game of life.  survival of  fittest.
   
PROGRAM:
----------------
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define Space 32
#define TheMatch ((line[i] == 'T' || line[i] == 't') && \
                  (line[i + 1] == 'h' || line[i + 1] == 'H') && \
                  (line[i + 2] == 'e' || line[i + 2] == 'E') && \
                  (line[i + 3] == Space || line[i + 3] == '\0') )
                

void removeThe(char *line) {
    int i, j;
    int removed = 0; 
    int len = strlen(line);

    for (i = 0; i < len; i++) 
    {
        if (TheMatch) 
        { 
            removed = 1;
            for (j = i; j < len; j++) 
            {
                line[j] = line[j + 3];  // Skip the word "the" and shift remaining characters
            }
           line[j] = '\0';
        }
    }
}

int main() {
    char line[80];

   // printf("Enter the line: ");
    fgets(line, sizeof(line), stdin);
    line[strcspn(line, "\n")] = '\0';

    removeThe(line);

    printf("\nAfter removing all occurrences of the word 'the':\n\n");
    if (strlen(line) > 0) {
        printf("%s", line);
    } else {
        printf("The string is empty");
    }

    return 0;
}
